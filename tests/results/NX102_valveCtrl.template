



# Arguments of VDCT hash bang Input Macro directive:
# (macro name, description, xpos, ypos, colour, defaultVisibility)
# ##############################################################################
# Control
# 
# % archiver 10 Monitor
# % controldesk Status scon
## Use this PV to request the valve to open or close
# The request will be checked by $(device):CALCCON
record(mbbo, "$(device):CON") {
  field(DESC, "Control")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(con_label0)")
  field(ONST, "$(con_label1)")
  field(TWST, "$(con_label2)")
  field(THST, "$(con_label3)")
  field(FRST, "$(con_label4)")
  field(FVST, "$(con_label5)")
  field(SXST, "$(con_label6)")
  field(SVST, "$(con_label7)")
  field(VAL, "0")
  field(OUT, "$(device):CALCCON.A PP")
}

record(seq, "$(device):OPENSEQ") {
  field(LNK1, "$(device):CON PP")
  field(LNK2, "$(device):CON PP")
  field(DO1, "2")
  field(DO2, "0")
  field(DLY2, "1")
}

## If this PV is non-zero then an open request will be allowed by 
# $(device):CALCCON
record(bi, "$(device):OPENALLOWED") {
  field(DESC, "Allow/inhibit valve opening")
  field(INP, "$(allowpv=)")
  field(VAL, "1")
  field(ONAM, "Yes")
  field(ZNAM, "No")
}

record(stringout, "$(device):WHYLOCKED") {
  field(DESC, "Reason why device is locked")
  field(VAL, "$(whylocked)")
}

## Pass all requests through to the PLC unless it is an open request and 
# $(device):OPENALLOWED is zero
record(calcout, "$(device):CALCCON") {
  field(INPB, "$(device):OPENALLOWED")
  field(OUT, "$(device):ACTUALCON PP")
  field(CALC, "(B=0&A=0)?0:1")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
}

## Send the request down to the PLC
record(ao, "$(device):ACTUALCON") {
  field(DESC, "Control")
  field(DTYP, "EtherIP")
  field(OUT, "@$(PORT) $(TAG).Control[$(TAGIDX)] S .2")
  field(PRIO, "HIGH")
  field(FLNK, "$(device):SETBUSY")
}

record(bi, "$(device):OPENING") {
  field(DESC, "Opening Valves")
  field(PINI, "YES")
  field(INP, "0")
  field(ONAM, "Opening")
}

record(calcout, "$(device):SETBUSY") {
  field(CALC, "1")
  field(OUT, "$(device):BUSY PP NMS")
  field(FLNK, "$(device):DONECALC")
}

record(calcout, "$(device):DONECALC") {
  field(INPA, "$(device):CON MS")
  field(INPB, "$(device):STA CPP MS")
  field(INPC, "$(device):ILKSTA CPP MS")
  field(INPD, "$(device):LASTCON CPP MS")
  field(CALC, "$(donecalc)")
  field(OOPT, "When Zero")
  field(DOPT, "Use CALC")
  field(OUT, "$(device):BUSY CA NMS")
}

# % archiver 10 Monitor
record(mbbi, "$(device):LASTCON") {
  field(DESC, "Control Readback")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(con_label0)")
  field(ONST, "$(con_label1)")
  field(TWST, "$(con_label2)")
  field(THST, "$(con_label3)")
  field(FRST, "$(con_label4)")
  field(FVST, "$(con_label5)")
  field(SXST, "$(con_label6)")
  field(SVST, "$(con_label7)")
  field(INP, "$(device):LASTCON:INP")
}

# Necessary to have this extra record as mbbi does not work exactly as expected
record(ai, "$(device):LASTCON:INP") {
  field(DESC, "Control Readback Raw")
  field(DTYP, "EtherIP")
  field(INP, "@$(PORT) $(TAG).Last_Control[$(TAGIDX)]")
  field(SCAN, ".2 second")
  field(FLNK, "$(device):LASTCON")
}

# ###################################################################
# Interlock Status
# 
# % archiver 10 Monitor
# % controldesk Interlock Status smon
record(mbbi, "$(device):ILKSTA") {
  field(DESC, "Interlock Status")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(ilksta_label0)")
  field(ONST, "$(ilksta_label1)")
  field(TWST, "$(ilksta_label2)")
  field(THST, "$(ilksta_label3)")
  field(FRST, "$(ilksta_label4)")
  field(FVST, "$(ilksta_label5)")
  field(SXST, "$(ilksta_label6)")
  field(SVST, "$(ilksta_label7)")
  field(ZRSV, "$(ilksta_sv0)")
  field(ONSV, "$(ilksta_sv1)")
  field(TWSV, "$(ilksta_sv2)")
  field(THSV, "$(ilksta_sv3)")
  field(FRSV, "$(ilksta_sv4)")
  field(FVSV, "$(ilksta_sv5)")
  field(SXSV, "$(ilksta_sv6)")
  field(SVSV, "$(ilksta_sv7)")
  field(NOBT, "3")
  field(INP, "$(device):ILKSTA:INP")
}

# Necessary to have this extra record as mbbi does not work exactly as expected
record(ai, "$(device):ILKSTA:INP") {
  field(DESC, "Interlock status")
  field(DTYP, "EtherIP")
  field(INP, "@$(PORT) $(TAG).ILK_Status[$(TAGIDX)]")
  field(SCAN, ".2 second")
  field(FLNK, "$(device):ILKSTA")
}

# #########################################################################
# Status
# 
# % archiver 10 Monitor
# % controldesk Status smon
# This makes the component icon reflect the status
# % gui, $(name=), sevr
record(mbbi, "$(device):STA") {
  field(DESC, "Status")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(sta_label0)")
  field(ONST, "$(sta_label1)")
  field(TWST, "$(sta_label2)")
  field(THST, "$(sta_label3)")
  field(FRST, "$(sta_label4)")
  field(FVST, "$(sta_label5)")
  field(SXST, "$(sta_label6)")
  field(SVST, "$(sta_label7)")
  field(ZRSV, "$(sta_sv0)")
  field(ONSV, "$(sta_sv1)")
  field(TWSV, "$(sta_sv2)")
  field(THSV, "$(sta_sv3)")
  field(FRSV, "$(sta_sv4)")
  field(FVSV, "$(sta_sv5)")
  field(SXSV, "$(sta_sv6)")
  field(SVSV, "$(sta_sv7)")
  field(INP, "$(device):STA:INP")
}

# Necessary to have this extra record as mbbi does not work exactly as expected
record(ai, "$(device):STA:INP") {
  field(DESC, "Interlock status")
  field(DTYP, "EtherIP")
  field(INP, "@$(PORT) $(TAG).Status[$(TAGIDX)]")
  field(SCAN, ".2 second")
  field(FLNK, "$(device):STA")
}

# ############################################################################
# Number of Operations
# 
# % archiver 10 Monitor
# % controldesk Number of Operations readback
record(ai, "$(device):OPS") {
  field(DESC, "Operations")
  field(DTYP, "EtherIP")
  field(SCAN, "1 second")
  field(HOPR, "10000")
  field(LOPR, "0")
  field(HIHI, "10000")
  field(HIGH, "9000")
  field(LOW, "0")
  field(LOLO, "-1")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(INP, "@$(PORT) $(TAG).Operations_Count[$(TAGIDX)]")
}

# #########################################################################
# Mode Status (individual bits pulled off in each valve template
# The NOBT field specifies to reads 16 consecutive bits.
# The ether_ip B 0 flag in the INP field specifies to start at bit 0.
#
record(mbbiDirect, "$(device):MODSTA") {
  field(DESC, "Mode")
  field(DTYP, "EtherIP")
  field(SCAN, "1 second")
  field(INP, "@$(PORT) $(TAG).Service_Mode[$(TAGIDX)] B 0")
  field(NOBT, "16")
}

record(mbbi, "$(device):INTERFACE") {
  field(DTYP, "Soft Channel")
  field(INP, "$(device):INTERFACE:RAW")
  field(ZRST, "Valve with limit")
  field(ONST, "Valve without limit")
  field(TWST, "Bistable valve")
  field(THST, "Dual valve")
  field(FRST, "Butterfly valve")
  field(FVST, "Fast valve")
}

record(ai, "$(device):INTERFACE:RAW") {
  field(SCAN, "10 second")
  field(DTYP, "EtherIP")
  field(FLNK, "$(device):INTERFACE")
  field(INP, "@$(PORT) $(TAG).Interfc[$(TAGIDX)]")
}

record(busy, "$(device):BUSY") {
}

record(calcout, "$(device):MOVN") {
  field(DESC, "Is valve moving")
  field(DTYP, "Soft Channel")
  field(CALC, "A=2|A=4")
  field(INPA, "$(device):STA CP")
}

